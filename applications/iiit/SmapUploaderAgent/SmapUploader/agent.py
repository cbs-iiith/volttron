# -*- coding: utf-8 -*- {{{
# vim: set fenc=utf-8 ft=python sw=4 ts=4 sts=4 et:

import logging
logging.basicConfig()

import sys
import cPickle
from time import time

from volttron.platform.vip.agent import Agent, Core, PubSub
from volttron.platform.agent import utils
from volttron.platform.messaging import headers as headers_mod

from smap_tools import smap_post

# Change this to whatever the root of the messages is on your system
# For example, all of the messages being generated by our volttron-level code
# start with LPDM.  E.G. /LPDM/energy_price or /LPDM/power_use
# If you want to listen to all topics just replace the below with empty string ""  
BASE_TOPIC_TO_LISTEN_TO = "LPDM"  

# This is the information needed to post to smap.  The source_name might be able
# to be derived somehow and the API key and server root could go in a config
# But this seems easier to show for an example.
SMAP_ROOT = "http://chomp.lbl.gov/"
API_KEY = "u606HlEFHTeVLfpBQZkNF232wChljnLHCKBY"
SOURCE_NAME = "LPDM CBERD Flexlab Data"
TIME_ZONE = "US/Pacific"

class SmapUploaderAgent(Agent):
    """
    Base class for LPDM agents.  Responsible for most of the general things need to run in volttron
    like handling messages or setting the interface for subclasses to handle messages where necessary
    and the basic headers of the message.  Also handles messages for changing device settings.        
    """
    def __init__(self, config_path, **kwargs):        
        super(SmapUploaderAgent, self).__init__(**kwargs)
                

    @PubSub.subscribe("pubsub", BASE_TOPIC_TO_LISTEN_TO)
    def post_message_to_smap(self, peer, sender, bus, topic, headers, message):
        # There are some streams under LPDM that we do not want to log.  
        # E.G. there is a LPDM/subscriptions topic 
        # and a LPDM/init topic that we don't want to log at all.
        # Just check for it or any other messages you don't want to log here
        # and return without doing anything.  Maybe there is a better way to filter
        # using the VOLTTRON messaging but I don't know how off-hand.
        keywords_to_skip = ["subscriptions", "init", "finished_processing"]
        for keyword in keywords_to_skip:
            if keyword in topic:
                return
        
        print topic
        topic = "/" + topic
        # this is where you have to take the message and convert it to a smap stream.
        # This currently just uses the VOLTTRON topic as the stream path
        # Extracting the contents of the message depends on what the message looks like
        # In our case I am pickling/unpickling objects that are being generated by a lower
        # level module
        message_time = None
        message_value = None
        
        try:
            message = cPickle.loads(message)
            message_time = max(message_time, message.time)
            if message_time is None:
                message_time = time()
            message_value = message.value
        except Exception as e:
            # there are a few messages that are not objects, assuming their contents
            # are a dict with a value param and an optional timestamp param
            # if there is no timestamp param just use current system time
            message_time = message.get("timestamp", time())
            message_value = message.get("value", None)
                        
        # in our case times are being expressed as seconds since the epoch.  However smap
        # expects ms since the epoch so I am multipling by 1000 here.  If you are passing around
        # datetimes you can give those directly to the smap posting code.  It can deal with them
        if type(message_time) is float:        
            message_time *= 1000
        
        # I am not sure at the moment how to derive units from a topic in a general sense and we are not
        # passing any unit information in messages.  So absent hard-coding some mapping I'm just leaving
        # the units blank for now.  They can always be filled in later
        units = ""
        reading_type = "double"
        
        #All the message objects we are sending have a time and a value member
        readings = [[message_time, message_value]]
        
        smap_post(SMAP_ROOT, API_KEY, topic, units, reading_type, readings, SOURCE_NAME, TIME_ZONE)
        
    
def main(argv=sys.argv):
    '''Main method called by the eggsecutable.'''
    utils.vip_main(SmapUploaderAgent)


if __name__ == '__main__':
    try:
        sys.exit(main(sys.argv))
    except KeyboardInterrupt:
        pass
